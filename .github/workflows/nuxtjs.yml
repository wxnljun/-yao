#构建Nuxt站点并将其部署到GitHub页面的示例工作流
#
#要开始使用Nuxt，请参阅:https://nuxtjs . org/docs/get-started/installation
#
名字: 名称:将Nuxt站点部署到页面

在:
#针对默认分支的推送运行#针对默认分支的推送运行
推:
分支: ["主要"]

#允许您从"操作"选项卡手动运行此工作流#允许您从“操作”选项卡手动运行此工作流
工作流_调度:

#设置GITHUB_TOKEN的权限以允许部署到GITHUB页面
许可:
内容: 内容:阅读
页: 页面:书写
身份令牌: id-token:写入

#仅允许一个并发部署，跳过正在运行和最新排队运行之间排队的运行。
#但是，不要取消正在进行的运行，因为我们希望这些生产部署能够完成。
并发:
组: "页数"
正在取消: 错误的

工作:
#构建作业
建设:
连续运行: Ubuntu-最新版
步伐:
      - 名字: 检验
使用: 动作/签出@v4
      - 名字: 检测软件包管理器
身份证明（identification）: 检测包管理器
奔跑: |
if[-f " $ { { github。工作区} }/yarn。锁定"]；然后
echo “经理=纱线” > > $ GITHUB _ OUTPUT
echo "命令=安装" > > $ GITHUB _ OUTPUT
出口0
elif[-f " $ { { github。工作区} }/包。JSON "]；然后
echo “经理= NPM” > > $ GITHUB _ OUTPUT
echo "命令= ci " > > $ GITHUB _ OUTPUT
出口0
其他
回显“无法确定软件包管理器”
1号出口
船方不负担装货费用
      - 名字: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - 名字: Setup Pages
        uses: actions/configure-pages@v5
随着:
#在Nuxt配置文件中自动注入路由器. base并设置
# target to static(https://nuxtjs。org/docs/configuration-glossary/configuration-target/).
          #
#如果您想自己管理配置，可以删除此行。
静态站点生成器: 静态站点生成器:nuxt
      - 名字: 恢复缓存
使用: 动作/缓存@v4
随着:
          path: |
            dist
            .nuxt
          key: ${{ runner.os }}-nuxt-build-${{ hashFiles('dist') }}
          restore-keys: |
            ${{ runner.os }}-nuxt-build-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Static HTML export with Nuxt
        run: ${{ steps.detect-package-manager.outputs.manager }} run generate
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job
  deploy:
环境:
名字: github-页面
全球资源定位器(Uniform Resource Locator): ${{步骤.部署.输出.页面_url}}
连续运行: Ubuntu-最新版
需要: 建设
步伐:
      - 名字: 部署到GitHub页面
身份证明（identification）: 部署
使用: 操作/部署-页面@v4
